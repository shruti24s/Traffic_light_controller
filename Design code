// Code your design here
`define TRUE 1'b1
`define FALSE 1'b0
`define Y2Rdelay 3 // Delay from state 1 to state 2 and state 4 to state 0
`define R2Gdelay 2 // Delay from state 2 to state 3

module traffic_light(ctr, hw, x, clk, clr);
  input x, clk, clr;
  output reg [1:0] ctr, hw; 
  
  // Traffic light states
  parameter RED = 2'b00, YELLOW = 2'b01, GREEN = 2'b10;
  
  // State encoding
  parameter s0 = 3'd0, // HW = GREEN, CTR = RED
            s1 = 3'd1, // HW = YELLOW, CTR = RED
            s2 = 3'd2, // HW = RED, CTR = RED
            s3 = 3'd3, // HW = RED, CTR = GREEN
            s4 = 3'd4; // HW = RED, CTR = YELLOW
  
  reg [2:0] state, next_state; // Current and next state


  // State transition on clock edge
  always @(posedge clk) begin
    if (clr)
      state <= s0;
    else
      state <= next_state;
  end

  // Output logic based on state
  always @(state) begin
    // Default values
    hw = GREEN; // Highway default signal
    ctr = RED;  // Country road traffic default signal

    case (state)
      s0: ;            // HW = GREEN, CTR = RED (default values already set)
      s1: hw = YELLOW; // HW = YELLOW, CTR = RED
      s2: hw = RED;    // HW = RED, CTR = RED
      s3: begin
        ctr = GREEN;   // HW = RED, CTR = GREEN
        hw=RED;
        end
      s4: begin
        ctr = YELLOW;  // HW = RED, CTR = YELLOW
        hw=RED;
      end
    endcase
  end

  // State transition logic (Finite State Machine)
  always @(state or x) begin
    case (state)
      s0: if (x) next_state = s1; // If car detected on coutry road, move to s1
          else next_state = s0;

      s1: begin
        repeat(`Y2Rdelay) @(posedge clk); // Repeat the block for Y2Rdelay clock cycles, triggered by posedge clk
            next_state = s2; // and after delay we will get next state
        end

      s2: begin
        repeat(`R2Gdelay) @(posedge clk); // Repeat the block for R2Gdelay clock cycles, triggered by posedge clk
            next_state = s3;
        end

      s3: if (x)
            next_state = s3; // Stay in s3 if car is present
          else
            next_state = s4;

      s4: begin
        repeat(`Y2Rdelay) @(posedge clk);
            next_state = s0;
        end

      default: next_state = s0; // Default state is s0
    endcase
  end
endmodule
